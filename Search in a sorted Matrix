/* 
Given a strictly sorted 2D matrix mat[][] of size n x m and a number x. Find whether the number x is present in the matrix or not.
Note: In a strictly sorted matrix, each row is sorted in strictly increasing order, and the first element of the ith row (i!=0) is greater than the last element of the (i-1)th row.
24/12/2024
Examples:

Input: mat[][] = [[1, 5, 9], [14, 20, 21], [30, 34, 43]], x = 14
Output: true
Explanation: 14 is present in the matrix, so output is true.
Input: mat[][] = [[1, 5, 9, 11], [14, 20, 21, 26], [30, 34, 43, 50]], x = 42
Output: false
Explanation: 42 is not present in the matrix.
Input: mat[][] = [[87, 96, 99], [101, 103, 111]], x = 101
Output: true
Explanation: 101 is present in the matrix.
*/
/*class Solution {
    // Function to search a given number in row-column sorted matrix.
    public boolean searchMatrix(int[][] mat, int x) {
        // code here
        int row = mat.length;
        int col = mat[0].length-1;
        int i =0;
        while(col>=0  && i<row){
            if(mat[i][col]==x){
                return true;
            }else if(mat[i][col]>x){
                col--;
            }else{
                i++;
            }
        }
        return false;
        
    }
}
*/
class Solution {
    // Function to search a given number in a row-column sorted matrix.
    public boolean searchMatrix(int[][] mat, int x) {
        
        int n = mat.length;
        int m = mat[0].length;
        int l = 0;
        int r = n * m - 1;
        
        while (l <= r) {
            int mid = l + (r - l) / 2;
            int i = mid / m; // Row index
            int j = mid % m; // Column index
            
            if (mat[i][j] == x) {
                return true;
            } else if (mat[i][j] < x) {
                l = mid + 1; 
            } else {
                r = mid - 1; // Move to the left half
            }
        }
        
        return false; // Element not found
    }
}


